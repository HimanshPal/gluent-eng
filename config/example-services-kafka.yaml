########################################################################################
# Example (mandatory) 'linux-service' configuration file
#     for 'kafka services'
#
# Contents:
#
# service-name:
#     sequence: order of start/stop, must be a number
#         Mandatory, allowed to have 'gaps'
#         Services will be started in the increasing order, stopped in the decreasing order
#
#     start: Start command
#     stop: Stop command
#     status: Status command
#         Mandatory
#         (shell) commands to start, stop or check status
#
#     user: UNIX user to run command as (through 'sudo' for now)
#         Optional
#         If not supplied, assumes 'current' user
#
#     pid: Command to extract service 'pid'
#         Semi-optional, used with 'extended status' command to look for ports/logs
#
#     wait: Seconds to wait after start/stop command 
#         Optional, designed to let current service status 'propagate' before working on the next service
#         If not supplied, assumes 'no wait'
#
# Order of entries is not important (although, we recommend to keep entries in the order of sequence)
########################################################################################

zookeeper-server:
    sequence: 1
    user: root
    start: service zookeeper-server start
    stop: service zookeeper-server stop
    status: service zookeeper-server status
    pid: cat /var/run/zookeeper/zookeeper-server.pid

kafka-server:
    sequence: 10
    user: kafka
    start: ${KAFKA_HOME}/bin/kafka-server-start ${KAFKA_HOME}/etc/kafka/server.properties >/var/log/kafka/kafka-server-confluent.log 2>&1 &
    stop: ${KAFKA_HOME}/bin/kafka-server-stop
    status: ps --no-headers -p $(ps ax | grep -i 'io\.confluent\.support\.metrics\.SupportedKafka' | grep java | grep -v grep | awk '{print $1}')
    pid: ps ax | grep -i 'io\.confluent\.support\.metrics\.SupportedKafka' | grep java | grep -v grep | awk '{print \$1}'
    wait: 2

kafka-schema-registry:
    sequence: 11
    user: kafka
    start: ${KAFKA_HOME}/bin/schema-registry-start ${KAFKA_HOME}/etc/schema-registry/schema-registry.properties >/var/log/kafka/kafka-schema-registry.log 2>&1 &
    stop: ${KAFKA_HOME}/bin/schema-registry-stop
    status: ps --no-headers -p $(ps ax | grep -Pi '(io.confluent.kafka.schemaregistry.rest.Main)|(io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain)' | grep java | grep -v grep | awk '{print $1}')
    pid: ps ax | grep -Pi '(io.confluent.kafka.schemaregistry.rest.Main)|(io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain)' | grep java | grep -v grep | awk '{print \$1}'

kafka-rest:
    sequence: 12
    user: kafka
    start: ${KAFKA_HOME}/bin/kafka-rest-start ${KAFKA_HOME}/etc/kafka-rest/kafka-rest.properties >/var/log/kafka/kafka-rest.log 2>&1 &
    stop: ${KAFKA_HOME}/bin/kafka-rest-stop
    status: ps --no-headers -p $(ps ax | grep -Pi '(kafkarest\.Main)|(kafkarest\.KafkaRestMain)' | grep java | grep -v grep | awk '{print $1}')
    pid: ps ax | grep -Pi '(kafkarest\.Main)|(kafkarest\.KafkaRestMain)' | grep java | grep -v grep | awk '{print \$1}'

connect-standalone:
    sequence: 20
    user: kafka
    start: ${KAFKA_HOME}/bin/connect-standalone ${KAFKA_HOME}/etc/schema-registry/connect-avro-standalone.properties ${KAFKA_HOME}/etc/kafka-connect-jdbc/kafka.properties >/var/log/kafka/kafka-connect-snatdalone.log 2>&1 &
    stop: ps --no-headers -p $(ps ax | grep -Pi 'org.apache.kafka.connect.cli.ConnectStandalone' | grep java | grep -v grep | awk '{print $1}') | xargs kill
    status: ps --no-headers -p $(ps ax | grep -Pi 'org.apache.kafka.connect.cli.ConnectStandalone' | grep java | grep -v grep | awk '{print $1}')
    pid: ps ax | grep -Pi 'org.apache.kafka.connect.cli.ConnectStandalone' | grep java | grep -v grep | awk '{print \$1}'
